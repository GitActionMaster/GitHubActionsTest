name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag task_manager_api:latest

      - name: Run Flask app in Docker container
        run: |
          docker run -d --name flask-app -p 5000:5000 task_manager_api:latest
          sleep 10  # Espera 10 segundos para asegurar que Flask esté corriendo

      - name: Run tests with coverage
        run: |
          docker exec flask-app coverage run -m pytest  # Ejecuta las pruebas dentro del contenedor
          docker exec flask-app coverage report  # Muestra el informe de cobertura

      - name: Run normal tests (test_app.py)
        run: |
          docker exec flask-app pytest test_app.py  # Ejecuta los tests específicos dentro del contenedor

      - name: Lint code
        run: |
          docker exec flask-app flake8 .  # Ejecuta flake8 dentro del contenedor

      - name: Stop Docker container
        run: docker stop flask-app  # Detiene el contenedor

  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag task_manager_api:latest

  docker-publish:
    runs-on: ubuntu-latest
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/task_manager_api:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/task_manager_api:latest

