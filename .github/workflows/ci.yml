name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    services:
      flask:
        image: python:3.10  # Usamos la imagen de Python 3.10
        ports:
          - 5000:5000  # Exponemos el puerto 5000
        options: --health-cmd="curl --silent --fail http://localhost:5000 || exit 1" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and run Flask app inside Docker
        run: |
          docker build -t task_manager_api .  # Construye la imagen Docker
          docker run -d -p 5000:5000 task_manager_api  # Ejecuta la API Flask en el contenedor

      - name: Wait for Flask to be ready
        run: |
          sleep 10  # Espera a que Flask se inicie (ajusta este tiempo si es necesario)

      - name: Run tests with coverage
        run: |
          coverage run -m pytest  # Ejecuta los tests de pytest con cobertura
          coverage report

      - name: Run normal tests (test_app.py)
        run: |
          pytest test_app.py  # Ejecuta los tests de test_app.py

      - name: Lint code
        run: flake8 .  # Ejecuta flake8 para el análisis estático del código

  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-lint  # Este job solo se ejecutará si 'test-and-lint' es exitoso
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag task_manager_api:latest

  docker-publish:
    runs-on: ubuntu-latest
    needs: docker-build  # Este job solo se ejecutará si 'docker-build' es exitoso
    if: startsWith(github.ref, 'refs/tags/')  # Solo se ejecuta cuando se hace push de un tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/task_manager_api:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/task_manager_api:latest
